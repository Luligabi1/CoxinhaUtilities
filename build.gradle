plugins {
    id 'fabric-loom' version '1.4-SNAPSHOT'
    id "com.matthewprenger.cursegradle" version '1.4.0'
    id "com.modrinth.minotaur" version '2.3.1'
    id 'maven-publish'
}

configurations.configureEach {
    resolutionStrategy {
        force("net.fabricmc:fabric-loader:$loader_version")
    }
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

def ENV = System.getenv()

def RELEASE_NAME = "${version}"
def RELEASE_FILE = "${buildDir}/libs/${archivesBaseName}-${version}.jar"

@SuppressWarnings('GrMethodMayBeStatic')
def getChangeLog() {
    return ""
}

repositories {
    maven { url 'https://maven.isxander.dev/releases/' } // YACL
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } // YACL dependency
    maven { url 'https://maven.quiltmc.org/repository/release/' } // YACL dependency

    maven { url 'https://maven.shedaniel.me/' } // REI
    maven { url 'https://maven.terraformersmc.com/releases/' } // ModMenu
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    include modApi("teamreborn:energy:${project.energy_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation "dev.isxander.yacl:yet-another-config-lib-fabric:${project.yacl_version}"
    include modImplementation("dev.isxander.yacl:yet-another-config-lib-fabric:${project.yacl_version}")

    modCompileOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"

    modCompileOnly "dev.emi:emi-fabric:${project.emi_version}:api"
    //modRuntimeOnly "dev.emi:emi-fabric:${project.emi_version}"

    modCompileOnly "com.terraformersmc:modmenu:${project.modmenu_version}"
    modRuntimeOnly "com.terraformersmc:modmenu:${project.modmenu_version}"
}

processResources {
    inputs.property "1.0", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

curseforge {
    if (ENV.CURSEFORGE_API_KEY) {
        apiKey = ENV.CURSEFORGE_API_KEY
    }

    project {
        id = project.curseforge_id
        changelog = getChangeLog()
        releaseType = "release"
        addGameVersion project.minecraft_version
        addGameVersion "Fabric"

        mainArtifact(file(RELEASE_FILE)) {
            displayName = RELEASE_NAME
            relations {
                requiredDependency 'fabric-api'
                optionalDependency 'roughly-enough-items'
            }
        }

        afterEvaluate {
            uploadTask.dependsOn("remapJar")
        }
    }

    options {
        forgeGradleIntegration = false
    }
}

//Modrinth publishing
modrinth {
    if (ENV.MODRINTH_TOKEN) {
        token = ENV.MODRINTH_TOKEN
    }
    projectId = project.modrinth_id
    versionNumber = project.mod_version
    uploadFile = remapJar
    gameVersions = [project.minecraft_version]
    loaders = ['fabric']
    versionType = "release"
    changelog = getChangeLog()
    dependencies {
        required.project("fabric-api")
    }
}